// Code generated by mockery v2.30.1. DO NOT EDIT.

package repomocks

import (
	model "auth-service/pkg/model"

	mock "github.com/stretchr/testify/mock"
)

// AuthRepository is an autogenerated mock type for the AuthRepository type
type AuthRepository struct {
	mock.Mock
}

// Login provides a mock function with given fields: userInput
func (_m *AuthRepository) Login(userInput model.UserInput) (string, error) {
	ret := _m.Called(userInput)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(model.UserInput) (string, error)); ok {
		return rf(userInput)
	}
	if rf, ok := ret.Get(0).(func(model.UserInput) string); ok {
		r0 = rf(userInput)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(model.UserInput) error); ok {
		r1 = rf(userInput)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Register provides a mock function with given fields: userInput
func (_m *AuthRepository) Register(userInput model.UserInput) (model.User, error) {
	ret := _m.Called(userInput)

	var r0 model.User
	var r1 error
	if rf, ok := ret.Get(0).(func(model.UserInput) (model.User, error)); ok {
		return rf(userInput)
	}
	if rf, ok := ret.Get(0).(func(model.UserInput) model.User); ok {
		r0 = rf(userInput)
	} else {
		r0 = ret.Get(0).(model.User)
	}

	if rf, ok := ret.Get(1).(func(model.UserInput) error); ok {
		r1 = rf(userInput)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewAuthRepository creates a new instance of AuthRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAuthRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *AuthRepository {
	mock := &AuthRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
