// Code generated by mockery v2.30.1. DO NOT EDIT.

package repomocks

import (
	model "book-service/pkg/model"

	mock "github.com/stretchr/testify/mock"
)

// BookRepository is an autogenerated mock type for the BookRepository type
type BookRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: bookInput
func (_m *BookRepository) Create(bookInput model.BookInput) (model.Book, error) {
	ret := _m.Called(bookInput)

	var r0 model.Book
	var r1 error
	if rf, ok := ret.Get(0).(func(model.BookInput) (model.Book, error)); ok {
		return rf(bookInput)
	}
	if rf, ok := ret.Get(0).(func(model.BookInput) model.Book); ok {
		r0 = rf(bookInput)
	} else {
		r0 = ret.Get(0).(model.Book)
	}

	if rf, ok := ret.Get(1).(func(model.BookInput) error); ok {
		r1 = rf(bookInput)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields:
func (_m *BookRepository) GetAll() ([]model.Book, error) {
	ret := _m.Called()

	var r0 []model.Book
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]model.Book, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []model.Book); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Book)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: id
func (_m *BookRepository) GetByID(id string) (model.Book, error) {
	ret := _m.Called(id)

	var r0 model.Book
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (model.Book, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) model.Book); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(model.Book)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewBookRepository creates a new instance of BookRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBookRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *BookRepository {
	mock := &BookRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
